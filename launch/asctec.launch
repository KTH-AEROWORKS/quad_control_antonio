<launch>
  <!-- Also use this launch file for auk. -->
  <arg name="mav_name" default="bluebird"/>
  <arg name="namespace" default="$(arg mav_name)" />

  <rosparam file="$(find mav_startup)/parameters/capabilities.yaml"/>

  <group ns="$(arg namespace)" >
  
    <node name="mav_interface" pkg="ethzasl_mav_interface" type="mav_interface_node"
      output="screen" respawn="true" clear_params="true">
      <param name="frame_id" value="fcu" />
      <rosparam file="$(find mav_startup)/parameters/mavs/$(arg mav_name)/mav_interface.yaml"/>
      <param name="capability_group" value="Core" />
    </node>

    <node name="visensor_node" pkg="visensor_node" type="visensor_node" output="screen">
      <param name="capability_group" value="Core" />
    </node>

    <node name="mav_linear_mpc" pkg="mav_linear_mpc" type="mav_linear_mpc_node"  respawn="true" clear_params="true" output="screen">
      <remap from="odometry" to="msf_core/odometry" />
      <rosparam file="$(find mav_startup)/parameters/firefly/linear_mpc.yaml"/>
      <param name="capability_group" value="Core" />
    </node>

    <node name="mav_linear_mpc_weak" pkg="mav_linear_mpc" type="mav_linear_mpc_node"  respawn="true" clear_params="true" output="screen">
      <remap from="odometry" to="msf_core/odometry" />
      <rosparam file="$(find mav_startup)/parameters/firefly/linear_mpc_weak.yaml"/>
      <param name="capability_group" value="Extra" />
    </node>

    <node pkg="tf" type="static_transform_publisher" name="world_tf_broadcaster" args="0 0 0 0 0 0 1 world odom 100">
      <param name="capability_group" value="Core" />
    </node>

    <!-- Vicon -->
    <node name="pose_sensor_vicon" pkg="msf_updates" type="pose_sensor" respawn="true" clear_params="true" output="screen">
      <remap from="msf_updates/transform_input" to="vrpn_client/estimated_transform" />
      <remap from="msf_core/imu_state_input" to="imu" />
      <rosparam file="$(find mav_startup)/parameters/common/msf_parameters_vicon.yaml"/>
      <param name="capability_group" value="Vicon" />
    </node>

    <!-- Rovio -->
    <node name="rovio" pkg="rovio" type="rovio_node" output="screen">
      <param name="filter_config" value="$(find mav_startup)/parameters/mavs/$(arg mav_name)/rovio_filter.info" />
      <param name="camera0_config" value="$(find mav_startup)/parameters/mavs/$(arg mav_name)/rovio_equidist_cam0.yaml" />
      <param name="camera1_config" value="$(find mav_startup)/parameters/mavs/$(arg mav_name)/rovio_equidist_cam1.yaml" />
      <param name="capability_group" value="Rovio" />
    </node>

    <node name="pose_sensor_rovio" pkg="msf_updates" type="pose_sensor" clear_params="true" output="screen">
      <remap from="msf_core/imu_state_input" to="imu" />
      <remap from="msf_updates/transform_input" to="rovio/transform" />
      <rosparam file="$(find mav_startup)/parameters/mavs/$(arg mav_name)/msf_parameters_vision.yaml"/>
      <param name="capability_group" value="Rovio" />
    </node>

    <!-- Obstacle avoidance -->
    <!--node name="stereo_dense_reconstruction" pkg="stereo_dense_reconstruction_nodes" type="stereo_dense_reconstruction_node" output="screen">
      <remap from="image_cam0" to="cam0/image_raw" />
      <remap from="image_cam1" to="cam1/image_raw" />
      <remap from="calib_cam0" to="cam0/calibration" />
      <remap from="calib_cam1" to="cam1/calibration" />
      <This remaps the TF frame that the robot IMU is in.>
      <remap from="/ref" to="/imu" />
      <param name="undistort_images" value="true"/>
      <rosparam file="$(find stereo_dense_reconstruction_nodes)/cfg/ParamsHalfRes.yaml"/>
      <TODO(helenol): Fix to make this general to auk and bluebird.>
      <rosparam file="$(find mav_startup)/parameters/mavs/bluebird/camchain_p21014.yaml"/>
      <param name="capability_group" value="Obstacle Avoidance" />
    </node-->

    <node name="mav_flight_manager" pkg="mav_flight_manager" type="mav_flight_manager" output="screen">
      <param name="max_linear_velocity" value="2.0" />
      <param name="joystick_type" value="logitech_wireless" />
      <param name="frame_id" value="world" />
      <param name="set_point_frame_id" type="string" value="state_setpoint" />>
      <remap from="odometry" to="msf_core/odometry" />
      <rosparam file="$(find mav_startup)/parameters/common/obstacle_avoidance.yaml"/>
      <param name="capability_group" value="Obstacle Avoidance" />
    </node>

    <node name="mav_obstacle_map_manager" pkg="mav_obstacle_map_manager" type="mav_obstacle_map_manager_node"  output="screen" >
      <rosparam file="$(find mav_startup)/parameters/common/octomap.yaml"/>
      <remap from="disparity" to="no_disparity" />
      <remap from="pointcloud" to="stereo_dense_reconstruction/pcl"/>
      <remap from="scan" to="no_scan" />
      <param name="capability_group" value="Obstacle Avoidance" />
    </node>

    <!-- Planning -->
    <!--node name="octomap_manager" pkg="octomap_world" type="octomap_manager" output="screen" args="alsologtostderr" >
      <rosparam file="$(find mav_startup)/parameters/common/octomap.yaml"/>
      <remap from="disparity" to="no_disparity" />
      <remap from="pointcloud" to="stereo_dense_reconstruction/pcl"/>
      <remap from="scan" to="no_scan" />
      <param name="visualize_min_z" value="-1.0" />
      <param name="visualize_max_z" value="2.0" />
      <param name="capability_group" value="Planning" />
    </node-->

    <node name="trajectory_sampling" pkg="mav_planning_utils" type="trajectory_sampling_node" output="screen">
      <param name="capability_group" value="Planning" />
    </node>

    <!--node name="local_planner" pkg="mav_local_planner" type="local_planner_node" output="screen">
      <remap from="octomap_full" to="octomap_manager/octomap_full" />
      <remap from="odometry" to="msf_core/odometry" />
      <param name="autostart" value="false" />
      <param name="waypoint_planner_type" value="polynomial" />
      <param name="local_frame_id" value="world" />
      <param name="trajectory_sampler/yaw_policy" value="velocity_vector" />
      <param name="capability_group" value="Planning" />
    </node-->

    <!--node name="planner" pkg="planner_ompl" type="planner_ompl_node" output="screen">
      <remap from="octomap_full" to="octomap_manager/octomap_full" />
      <param name="frame_id" value="world" />
      <param name="plan_yaw" value="true" />
      <param name="planner_ompl/simplify_solution" value="true" />
      <param name="planner_ompl/num_seconds_to_plan" value="2.0" />
      <param name="planner_polynomial/time_penalty" value="250" />
      <param name="treat_unknown_as_occupied" value="false" />
      <param name="capability_group" value="Planning" />
    </node-->
    
    <!--node name="antonio_planner" pkg="quad_control" type="asctec_planner_node.py" output="screen"/-->
    
    <node name="antonio_point_sequence_planner" pkg="quad_control" type="asctec_point_sequence_planner_node.py" output="screen"/>
    
  </group>
  
</launch>
